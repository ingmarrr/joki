use crate::err;

#[derive(Debug, PartialEq)]
pub enum TokKind {
    Ident,
    Char,
    String,
    Int,
    Alpha,
    Num,

    Add,
    Sub,
    Mul,
    Div,

    Eq,
    Gt,
    Lt,

    Neq,
    Deq,
    Geq,
    Leq,
    AddEq,
    SubEq,
    MulEq,
    DivEq,
    Lsl,
    Lsr,
    And,
    Or,
    Caret,
    Wave,
    Comment,

    LParen,
    RParen,
    LSquare,
    RSquare,
    LBrace,
    RBrace,

    Semi,
    Colon,
    Comma,
    Bang,
    Ques,
    At,
    Pound,
    Under,
    Dot,
    SQ,
    DQ,

    T,
    Type,
    Let,
    Fn,
    // Proc
    Asm,
    Struct,
    Trait,
    Comptime,
    Package,
    Pub,
    Mut,
    Use,

    If,
    Else,
    Match,
    Return,
    True,
    False,
    For,

    Ws,
    Nl,
    Invalid,
    Esc,
    EOF,
}

#[derive(Debug, PartialEq)]
pub enum Tok {
    Ident(String),
    Char(String),
    String(String),
    Scalar(String),
    Alpha(char),
    Num(char),

    Add,
    Sub,
    Mul,
    Div,

    Eq,
    Gt,
    Lt,

    Neq,
    Deq,
    Geq,
    Leq,
    AddEq,
    SubEq,
    MulEq,
    DivEq,
    Lsl,
    Lsr,
    And,
    Or,
    Caret,
    Wave,
    Comment,

    LParen,
    RParen,
    LSquare,
    RSquare,
    LBrace,
    RBrace,

    Semi,
    Colon,
    Comma,
    Bang,
    Ques,
    At,
    Pound,
    Under,
    Dot,
    SQ,
    DQ,

    T,
    Type,
    Let,
    Fn,
    // Proc
    Asm,
    Struct,
    Trait,
    Comptime,
    Package,
    Pub,
    Mut,
    Use,

    If,
    Else,
    Match,
    Return,
    True,
    False,
    For,

    Ws,
    Nl,
    Invalid,
    Esc,
    EOF,
}

impl From<char> for Tok {
    fn from(value: char) -> Self {
        match value {
            '+' => Tok::Add,
            '-' => Tok::Sub,
            '*' => Tok::Mul,
            '/' => Tok::Div,
            '(' => Tok::LParen,
            ')' => Tok::RParen,
            '[' => Tok::LSquare,
            ']' => Tok::RSquare,
            '{' => Tok::LBrace,
            '}' => Tok::RBrace,
            ';' => Tok::Semi,
            ':' => Tok::Colon,
            ',' => Tok::Comma,
            '=' => Tok::Eq,
            '>' => Tok::Gt,
            '<' => Tok::Lt,
            '&' => Tok::And,
            '|' => Tok::Or,
            '^' => Tok::Caret,
            '~' => Tok::Wave,
            '!' => Tok::Bang,
            '@' => Tok::At,
            '#' => Tok::Pound,
            '?' => Tok::Ques,
            '_' => Tok::Under,
            '.' => Tok::Dot,
            '\'' => Tok::SQ,
            '"' => Tok::DQ,
            '\\' => Tok::Esc,
            '\n' => Tok::Nl,
            '\r' => Tok::Nl,
            ' ' => Tok::Ws,
            '\t' => Tok::Ws,
            '\0' => Tok::EOF,
            _ if value.is_alphabetic() => Tok::Alpha(value),
            _ if value.is_numeric() => Tok::Num(value),
            _ => Tok::Invalid,
        }
    }
}

impl From<&str> for Tok {
    fn from(value: &str) -> Self {
        match value {
            "T" => Tok::T,
            "type" => Tok::Type,
            "let" => Tok::Let,
            "fn" => Tok::Fn,
            "asm" => Tok::Asm,
            "struct" => Tok::Struct,
            "trait" => Tok::Trait,
            "comp" => Tok::Comptime,
            "pub" => Tok::Pub,
            "pack" => Tok::Package,
            "mut" => Tok::Mut,
            "use" => Tok::Use,
            "if" => Tok::If,
            "else" => Tok::Else,
            "match" => Tok::Match,
            "return" => Tok::Return,
            "true" => Tok::True,
            "false" => Tok::False,
            "for" => Tok::For,
            "+=" => Tok::AddEq,
            "-=" => Tok::SubEq,
            "*=" => Tok::MulEq,
            "/=" => Tok::DivEq,
            "==" => Tok::Deq,
            "!=" => Tok::Neq,
            ">=" => Tok::Geq,
            "<=" => Tok::Leq,
            "<<" => Tok::Lsl,
            ">>" => Tok::Lsr,
            "//" => Tok::Comment,
            _ => Tok::Ident(value.to_string()),
        }
    }
}

impl std::fmt::Display for Tok {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Tok::Ident(s) => write!(f, "{}", s),
            Tok::String(s) => write!(f, r#""{}""#, s),
            Tok::Char(s) => write!(f, "'{}'", s),
            Tok::Scalar(s) => write!(f, "{}", s),
            Tok::Alpha(c) => write!(f, "{}", c),
            Tok::Num(c) => write!(f, "{}", c),
            Tok::Add => write!(f, "+"),
            Tok::Sub => write!(f, "-"),
            Tok::Mul => write!(f, "*"),
            Tok::Div => write!(f, "/"),
            Tok::Eq => write!(f, "="),
            Tok::Gt => write!(f, ">"),
            Tok::Lt => write!(f, "<"),
            Tok::Neq => write!(f, "!="),
            Tok::Deq => write!(f, "=="),
            Tok::Geq => write!(f, ">="),
            Tok::Leq => write!(f, "<="),
            Tok::AddEq => write!(f, "+="),
            Tok::SubEq => write!(f, "-="),
            Tok::MulEq => write!(f, "*="),
            Tok::DivEq => write!(f, "/="),
            Tok::Lsl => write!(f, "<<"),
            Tok::Lsr => write!(f, ">>"),
            Tok::And => write!(f, "&"),
            Tok::Or => write!(f, "|"),
            Tok::Caret => write!(f, "^"),
            Tok::Wave => write!(f, "~"),
            Tok::LParen => write!(f, "("),
            Tok::RParen => write!(f, ")"),
            Tok::LSquare => write!(f, "["),
            Tok::RSquare => write!(f, "]"),
            Tok::LBrace => write!(f, "{{"),
            Tok::RBrace => write!(f, "}}"),
            Tok::Semi => write!(f, ";"),
            Tok::Colon => write!(f, ":"),
            Tok::Comma => write!(f, ","),
            Tok::Bang => write!(f, "!"),
            Tok::Ques => write!(f, "?"),
            Tok::At => write!(f, "@"),
            Tok::Pound => write!(f, "#"),
            Tok::Under => write!(f, "_"),
            Tok::Dot => write!(f, "."),
            Tok::SQ => write!(f, "'"),
            Tok::DQ => write!(f, "\""),
            Tok::T => write!(f, "T"),
            Tok::Type => write!(f, "type"),
            Tok::Let => write!(f, "let"),
            Tok::Fn => write!(f, "fn"),
            Tok::Asm => write!(f, "asm"),
            Tok::Struct => write!(f, "struct"),
            Tok::Trait => write!(f, "trait"),
            Tok::Comptime => write!(f, "comp"),
            Tok::Package => write!(f, "pack"),
            Tok::Pub => write!(f, "pub"),
            Tok::Mut => write!(f, "mut"),
            Tok::Use => write!(f, "use"),
            Tok::If => write!(f, "if"),
            Tok::Else => write!(f, "else"),
            Tok::Match => write!(f, "match"),
            Tok::Return => write!(f, "return"),
            Tok::True => write!(f, "true"),
            Tok::False => write!(f, "false"),
            Tok::For => write!(f, "for"),
            Tok::Ws => write!(f, " "),
            Tok::Nl => write!(f, "\n"),
            Tok::Invalid => write!(f, "Invalid"),
            Tok::Esc => write!(f, "\\"),
            Tok::EOF => write!(f, "EOF"),
            Tok::Comment => write!(f, "//"),
        }
    }
}

pub enum InitTok {
    Add,
    Sub,
    Mul,
    Div,
    Eq,
    Bang,
    Gt,
    Lt,
    SQ,
    DQ,
    Alpha(char),
    Num(char),
    Under,
}

impl TryFrom<char> for InitTok {
    type Error = err::LexError;

    fn try_from(value: char) -> Result<Self, Self::Error> {
        match value {
            '+' => Ok(InitTok::Add),
            '-' => Ok(InitTok::Sub),
            '*' => Ok(InitTok::Mul),
            '/' => Ok(InitTok::Div),
            '=' => Ok(InitTok::Eq),
            '!' => Ok(InitTok::Bang),
            '>' => Ok(InitTok::Gt),
            '<' => Ok(InitTok::Lt),
            '\'' => Ok(InitTok::SQ),
            '"' => Ok(InitTok::DQ),
            '_' => Ok(InitTok::Under),
            _ if value.is_alphabetic() => Ok(InitTok::Alpha(value)),
            _ => Err(err::LexError::NotInit(value.to_string())),
        }
    }
}

impl TryFrom<&Tok> for InitTok {
    type Error = err::LexError;

    fn try_from(value: &Tok) -> Result<Self, Self::Error> {
        match value {
            Tok::Add => Ok(InitTok::Add),
            Tok::Sub => Ok(InitTok::Sub),
            Tok::Mul => Ok(InitTok::Mul),
            Tok::Div => Ok(InitTok::Div),
            Tok::Eq => Ok(InitTok::Eq),
            Tok::Bang => Ok(InitTok::Bang),
            Tok::Gt => Ok(InitTok::Gt),
            Tok::Lt => Ok(InitTok::Lt),
            Tok::SQ => Ok(InitTok::SQ),
            Tok::DQ => Ok(InitTok::DQ),
            Tok::Alpha(c) => Ok(InitTok::Alpha(*c)),
            Tok::Num(c) => Ok(InitTok::Num(*c)),
            Tok::Under => Ok(InitTok::Under),
            _ => Err(err::LexError::NotInit(value.to_string())),
        }
    }
}
